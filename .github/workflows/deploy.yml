name: Deploy to EC2 via ECR

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}        # e.g. 370260028554.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}    # e.g. policy/compliance-system

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Build from ./repo with Dockerfile at ./repo/Dockerfile
      - name: Build Docker image
        run: |
          set -e
          IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}"
          SHA_TAG="${IMAGE_NAME}:sha-${GITHUB_SHA}"
          LATEST_TAG="${IMAGE_NAME}:latest"

          echo "Building ${SHA_TAG}"
          docker build \
            -f repo/Dockerfile \
            -t "${SHA_TAG}" \
            -t "${LATEST_TAG}" \
            repo

          echo "SHA_TAG=${SHA_TAG}" >> "$GITHUB_ENV"
          echo "LATEST_TAG=${LATEST_TAG}" >> "$GITHUB_ENV"

      - name: Push Docker image
        run: |
          set -e
          docker push "${SHA_TAG}"
          docker push "${LATEST_TAG}"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ~/policy-qa
            # ensure .env exists and has IMAGE
            if [ ! -f .env ]; then touch .env; fi
            if grep -q '^IMAGE=' .env; then
              sed -i "s#^IMAGE=.*#IMAGE=${SHA_TAG}#" .env
            else
              echo "IMAGE=${SHA_TAG}" >> .env
            fi
            docker compose pull || true
            docker compose up -d
            docker image prune -f