name: build-and-deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin "$ECR_REGISTRY"

      - name: Build and push image
        run: |
          IMAGE="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:sha-${GITHUB_SHA}"
          LATEST="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest"
          docker build -t "$IMAGE" -t "$LATEST" .
          docker push "$IMAGE"
          docker push "$LATEST"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Deploy on EC2 via SSM (no SSH)
        env:
          INSTANCE_ID: ${{ vars.EC2_INSTANCE_ID }}
        run: |
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Policy QA deploy" \
            --parameters commands="$(cat <<'EOS'
          set -e
          cd ~/policy-qa

          # ensure .env exists and record IMAGE tag from the workflow
          if [ ! -f .env ]; then touch .env; fi
          if grep -q '^IMAGE=' .env; then
            sed -i "s#^IMAGE=.*#IMAGE=${IMAGE}#" .env
          else
            echo "IMAGE=${IMAGE}" >> .env
          fi

          docker compose pull || true
          docker compose up -d
          docker image prune -f
          EOS
          )" \
            --query "Command.CommandId" \
            --output text