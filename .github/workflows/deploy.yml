name: Deploy to EC2 via ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Build and push image (tags: sha and latest)"
        run: |
          set -e
          IMAGE_SHA="${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA}"
          IMAGE_LATEST="${{ env.IMAGE_NAME }}:latest"

          docker build \
            -t "$IMAGE_SHA" \
            -t "$IMAGE_LATEST" \
            ./repo

          docker push "$IMAGE_SHA"
          docker push "$IMAGE_LATEST"

          echo "IMAGE_SHA=$IMAGE_SHA" >> $GITHUB_ENV

      - name: Generate short-lived ECR password for EC2 login
        run: |
          echo "ECR_PASSWORD=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})" >> $GITHUB_ENV

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_REGION,ECR_REGISTRY,ECR_REPOSITORY,ECR_PASSWORD,IMAGE_NAME,GITHUB_SHA
          script: |
            set -euo pipefail

            # Login to ECR on the EC2 host using the short-lived token we generated
            echo "$ECR_PASSWORD" | docker login --username AWS --password-stdin "${{ secrets.ECR_REGISTRY }}"

            cd ~/policy-qa

            # Pull the newly built image by commit SHA tag
            IMAGE="${IMAGE_NAME}:sha-${GITHUB_SHA}"
            docker pull "$IMAGE"

            # Run compose pointing at the new image
            export IMAGE="$IMAGE"
            docker compose up -d

            # Optional: clean up old layers
            docker image prune -f